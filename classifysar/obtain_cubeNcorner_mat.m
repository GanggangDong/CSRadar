function [data_complete] = obtain_cubeNcorner_mat(strName, channels); 

%% read data of two channels from csv files. 
data1 = csvread(strName,0,3);
 data_test = data1(:,1:2);
 data_test1 = data1(:,3:4);
%% radar parameter
% delay in the hardware
% t0 = 27*10^(-9);
t0 = 0;
%frequency starts from 2GHz
f0 = 2e9;
%center frequency 3GHz, total bandwidth 2GHz
fc = 3e9;
%speed of light
c = 3e8;
%wavelength at center frequency
lamda = c/fc;
%step frequency 20MHz
delt_f = 20e6;
%for each channel of 1GHz bandwidth, there are 50 steps
N = 50;
%data sampled at 5KHz
fs1 = 5e3;
%sampled period 0.2ms
ts1 = 1/fs1;
%each frequency step duration 1ms, so there are 5 sampled points each pulse
s_num = 5;  
%50 steps, 5 points for each step, so there are 250 points in each frame
s_fram = 250.015; %instrument (signal genaretor) as reference
%total time for one frame 50ms
ts2 = ts1*s_fram;
%frame repeated frequency 20Hz
fs2 = 1/ts2;
%In experiment, data were collected for 20s, including 400 frames in total. We use 398 frames.
fram_num = 19;
%start read from this point(excel file), for each step the first two points generated by PLL are not good enough
first_sp = 3; 
%for each frequency step, only one sample point is selected
data = zeros(2,N*fram_num);
data1 = zeros(2,N*fram_num);
%% re-order data
%for each frequency step, there are 5 samples, only the 4th sample is used.
%for all 398 frames of channel 1, select the 4 the sample for each step and store them
%in matrix data. One column for I and the other column for Q
for cnt = 1:2
    for cnt1 = 1:fram_num
        data_tem = data_test(round(first_sp+s_fram*(cnt1-1)):round(first_sp-1+s_fram*cnt1),cnt);
        for cnt2 = 1:N
            data(cnt,cnt2+N*(cnt1-1)) = data_tem(2+round(s_num*(cnt2-1)))*exp(-j*2*pi*(2*10^9+(cnt2-1)*20*10^6)*t0);
        end

    end
end
% for all 398 frames of channel 2, select the 4 the sample for each step and store them
%in matrix data1. One column for I and the other column for Q
for cnt = 1:2
    for cnt1 = 1:fram_num
        data_tem1 = data_test1(round(first_sp+s_fram*(cnt1-1)):round(first_sp-1+s_fram*cnt1),cnt);
        for cnt2 = 1:N
            data1(cnt,cnt2+N*(cnt1-1)) = data_tem1(2+round(s_num*(cnt2-1)))*exp(-j*2*pi*(3*10^9+(cnt2-1)*20*10^6)*t0);
        end

    end
end
%form complex values using I and Q for both channels
%vector size 50*398
data_c_tem = data(1,:)-1i*data(2,:);
data_c_tem1 = data1(1,:)-1i*data1(2,:);
%transform the vectors to matrice, matrice size 50x398
data_c = reshape(data_c_tem,N,[]);
data_c1 = reshape(data_c_tem1,N,[]);
%one channel sweeps from 2-3GHz, the other channel sweeps from 3-4GHz
%combine these two matrice together, the new matrix is 100x398, and the
%frame size is 100 now

if nargin > 1
    data_complete = [data_c; data_c1];
else
    data_complete = data_c;
end


%%
%apply hamming window to each frame

%{
%%
N_hamming1 = hamming(N*2)*ones(1,fram_num);
data_c = data_c.*N_hamming1;


%pulse compress
%apply ifft to each frame
%fftshift moves the zero-frequency component to the center of spectrum
ifft_num = 1024*2;
range_profile = (ifft(data_c(:,1)-mean(data_c(:,1)),ifft_num));
range_profile_abs = abs(range_profile);
%range resolution
delt_range = c/(2*ifft_num*delt_f);
%range axis
r_axis = (0:ifft_num-1)*delt_range;

%plot the range information using 1st frame
yy = range_profile_abs(:,1);
yy = circshift(yy,-3155);
figure
plot(r_axis,yy/max(yy),'k-.','LineWidth',2)
%plot(r_axis,yy,'k-.','LineWidth',2)
xlabel('range/m','linewidth',12,'fontsize',10,'Fontname','Timesnewroman','fontWeight','bold');
ylabel('amplitude','linewidth',12,'fontsize',10,'Fontname','Timesnewroman','fontWeight','bold')
% cube_p4_r6 = data_c;
% save cube_p4_r6 cube_p4_r6

%}
